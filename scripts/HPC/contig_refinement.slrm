#!/bin/bash -l
#SBATCH --job-name="contig_refinement"
#SBATCH --cluster=genius
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=12
#SBATCH --mem-per-cpu=4G
#SBATCH --time=45:00
#SBATCH --account=lp_jm_virome_group
#SBATCH --output=slurm-%x_%a_%A.out 

###############################################################################

# Submit (from output/slurm_log)
# sbatch --array=1-97 --export=ALL ../../scripts/HPC/contig_refinement.slrm

source /data/leuven/341/vsc34111/mambaforge/etc/profile.d/conda.sh
conda activate viper_bphage
repo_location="$VSC_STAGING/BPhage"
threads=12

line=$(head -n $SLURM_ARRAY_TASK_ID $repo_location/data/core_contigs.txt | tail -n1)
echo $line

mkdir -p $VSC_SCRATCH/BPhage/contig_refinement/${line}
cd $VSC_SCRATCH/BPhage/contig_refinement/${line}

# Building mapping ref
sample=$(echo $line | cut -d"_" -f7-)
assembly=$(echo $line | cut -d"_" -f1,2 |  grep -o "NODE_[ABC]")

seqkit grep -r -p $assembly $VSC_STAGING/BPhage/output/bphage_viper_output/CONTIGS/${sample}_all.contigs.fasta.gz \
    > assembly.fasta
bwa-mem2 index assembly.fasta

# Get and potentially subset reads. If subsetting is necessary, it will be done with the same random seed as
# in the viper tripple assembly to get the exact same subset of reads.
if [[ "$assembly" = "NODE_A" ]]; then
    cp $repo_location/output/bphage_viper_output/READ/${sample}.Hostout.R1.fastq.gz temp.R1.fastq.gz
    cp $repo_location/output/bphage_viper_output/READ/${sample}.Hostout.R2.fastq.gz temp.R2.fastq.gz
fi
if [[ "$assembly" = "NODE_B" ]]; then
    # 10% of reads
    reformat.sh in=$repo_location/output/bphage_viper_output/READ/${sample}.Hostout.R1.fastq.gz \
        in2=$repo_location/output/bphage_viper_output/READ/${sample}.Hostout.R2.fastq.gz \
        out1=temp.R1.fastq.gz out2=temp.R2.fastq.gz \
        samplerate=0.1 sampleseed=1234 threads=$threads
fi
if [[ "$assembly" = "NODE_C" ]]; then
    # 1% of reads
    reformat.sh in=$repo_location/output/bphage_viper_output/READ/${sample}.Hostout.R1.fastq.gz \
        in2=$repo_location/output/bphage_viper_output/READ/${sample}.Hostout.R2.fastq.gz \
        out1=temp.R1.fastq.gz out2=temp.R2.fastq.gz \
        samplerate=0.01 sampleseed=1234 threads=$threads
fi

# Mapping
bwa-mem2 mem assembly.fasta temp.R1.fastq.gz temp.R2.fastq.gz \
    -t $threads | samtools view -h -F2052 | samtools sort -o temp.mapped.bam
samtools index -@ $threads temp.mapped.bam
samtools coverage temp.mapped.bam > temp.coverage.tsv

# Remove dups
cut -f1-3 temp.coverage.tsv | sed 1d > temp.regions.bed
samtools view -h -u --region-file temp.regions.bed temp.mapped.bam | \
    samtools collate -@ $threads -Ou - | samtools fixmate -@ $threads -u -m - - | samtools sort -@ $threads -u - | \
    samtools markdup -r -s -  - | samtools sort -o temp.mapped.rmdup.bam
samtools index -@ $threads temp.mapped.rmdup.bam

# Coverage 
samtools coverage temp.mapped.rmdup.bam > temp.coverage.rmdup.tsv
cut -f1,7 temp.coverage.rmdup.tsv | sed 1d > temp.meandepth.tsv

# Refinement
seqkit grep -p $line assembly.fasta > temp.query.fasta

conda activate cobra
cobra-meta --query temp.query.fasta --fasta assembly.fasta --assembler metaspades \
    -mink 21 -maxk 77 --mapping temp.mapped.rmdup.bam --coverage temp.meandepth.tsv \
    --output cobra --threads $threads 

# Clean up
rm temp.*
rm assembly.fasta*

# Copy output
mkdir -p $repo_location/output/core_contig_refinement
cp -r cobra $repo_location/output/core_contig_refinement/${line}

echo "========================================================================"
duration=$SECONDS
printf 'Job finished in: %02d:%02d:%02d\n' $((duration/3600)) $((duration%3600/60)) $((duration%60))
