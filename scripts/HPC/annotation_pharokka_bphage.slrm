#!/bin/bash -l
#SBATCH --job-name="annotation_pharokka_bphage"
#SBATCH --cluster=genius
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=36
#SBATCH --mem-per-cpu=4G
#SBATCH --time=6:00:00
#SBATCH --account=lp_jm_virome_group
#SBATCH --output=slurm-%x_%j.out 

###############################################################################

# Submit (from output/slurm_log)
# sbatch --export=ALL ../../scripts/HPC/annotation_pharokka_bphage.slrm

conda activate pharokka
repo_location="$VSC_STAGING/BPhage"
threads=36
pharokka_db="/staging/leuven/stg_00029/DB/pharokka/pharokka_1.4.0"

mkdir -p $VSC_SCRATCH/BPhage/annotation/pharokka
cd $VSC_SCRATCH/BPhage/annotation/pharokka

# Gather input fasta from own assembly and additional datasets
zcat $repo_location/output/bphage_ALL_1kb_phages.fasta.gz \
    $repo_location/output/bphage_ALL_1kb_unclassified_viruses.fasta.gz \
    $repo_location/output/bphage_ALL_1kb_picobirna.fasta.gz \
    > temp.bphage_and_others.fasta

# The IDs are too long for phold to handle. I rename them here already so the output is compatible with phold.
awk '/NODE/ {split($0, a, "_"); print a[1] "_" a[2] "_" a[7] "_" a[8] "_" a[9] "_" a[10] "_" a[11]; next} {print $1}' temp.bphage_and_others.fasta | \
    sed 's/__//' > bphage_and_others.fasta

# "_and_others" is not correct because it only contains bphage sequences (this is a left-over of previous testing). 
# But I didn't want to change the output file prefixes (-p) because that would cause a lot of trouble downstream.
pharokka.py -i bphage_and_others.fasta -o pharokka_bphage_and_others -d $pharokka_db \
    -t $threads -m -g prodigal-gv --meta_hmm -p bphage_and_others

# Copy files
mv pharokka_bphage_and_others/prodigal-gv.faa pharokka_bphage_and_others/bpgage_and_others_prodigal-gv.faa
mv pharokka_bphage_and_others/prodigal-gv.ffn pharokka_bphage_and_others/bpgage_and_others_prodigal-gv.ffn
mkdir -p $repo_location/output/annotation
cp -r pharokka_bphage_and_others $repo_location/output/annotation

# Clean up
rm temp.*

echo "========================================================================"
duration=$SECONDS
printf 'Job finished in: %02d:%02d:%02d\n' $((duration/3600)) $((duration%3600/60)) $((duration%60))
