#!/bin/bash -l
#SBATCH --job-name="prepare_fold_prediction"
#SBATCH --cluster=genius
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=1
#SBATCH --mem-per-cpu=4G
#SBATCH --time=10:00
#SBATCH --account=lp_jm_virome_group
#SBATCH --output=slurm-%x_%j.out 

###############################################################################

# Submit (from output/slurm_log)
# sbatch --export=ALL ../../scripts/HPC/prepare_fold_prediction.slrm


source /data/leuven/341/vsc34111/mambaforge/etc/profile.d/conda.sh
conda activate viper_bphage
repo_location="$VSC_STAGING/BPhage"

mkdir -p $repo_location/output/alphafold
cd $repo_location/output/alphafold

seqkit grep -rf $repo_location/data/core_contigs.txt \
    $repo_location/output/bphage_ALL_1kb_genomad/bphage_ALL_1kb_cross_95-85_summary/bphage_ALL_1kb_cross_95-85_virus_proteins.faa.gz \
    > prots_of_core_genomes.faa 

sed 1d $repo_location/data/core_one_genome_per_order.tsv > temp.tsv

while read line; do 
    contig=$(echo $line | cut -d" " -f1)
    order=$(echo $line | cut -d" " -f2)
    seqkit grep -rp $contig prots_of_core_genomes.faa | cut -d' ' -f1 | \
        cut -d"_" -f 1-4,7- > $order.faa
#         awk '/^>/{header=$0; sub(/^.*_/,"",header); print ">"header; next} {print}' | \
    # ChatGPT code:
    sequences=$(awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' $order.faa)

    # Initialize an array to store sequence JSON objects
    json_array=()

    # Loop through each sequence and format it into JSON
    while IFS=$'\t' read -r id sequence; do
        # Remove '>' from the id
        id=$(echo "$id" | sed 's/^>//')
        # Create JSON object for the sequence
        sequence_json=$(jq -n --arg id "$id" --arg seq "$sequence" '{name: $id, modelSeeds: [], sequences: [{proteinChain: {sequence: $seq, count: 1}}]}')
        # Add the sequence JSON object to the array
        json_array+=("$sequence_json")
    done <<< "$sequences"

    # Combine all JSON objects into a JSON array
    json_output=$(printf "%s\n" "${json_array[@]}" | jq -s '.')

    # Save the formatted JSON to a file
    echo "$json_output" > $order.json

done < temp.tsv
rm temp.tsv

echo "========================================================================"
duration=$SECONDS
printf 'Job finished in: %02d:%02d:%02d\n' $((duration/3600)) $((duration%3600/60)) $((duration%60))
