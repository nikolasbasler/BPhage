#!/bin/bash -l
#SBATCH --job-name="SNP_analysis_SKA1"
#SBATCH --cluster=genius
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=12
#SBATCH --mem-per-cpu=4G
#SBATCH --time=1:30:00
#SBATCH --account=lp_jm_virome_group
#SBATCH --output=slurm-%x_%a_%A.out

###############################################################################

# Submit (from output/slurm_log)
# sbatch --array=1-150 --export=ALL ../../scripts/HPC/SNP_analysis_SKA1.slrm

source /data/leuven/341/vsc34111/mambaforge/etc/profile.d/conda.sh
conda activate viper_bphage
repo_location="$VSC_STAGING/BPhage"
threads=12

line=$(head -n $SLURM_ARRAY_TASK_ID $repo_location/data/BPhage.bee.pool.list | tail -n1)

mkdir -p $VSC_SCRATCH/BPhage/SNP/ska/skf_files
mkdir -p $VSC_SCRATCH/BPhage/SNP/merged_reads
cd $VSC_SCRATCH/BPhage/SNP/

# Re-create the reads that mapped against the bee genome (were deleted during ViPER pipeline)
for gutpart in $(echo "mid ile rec"); do 
    for pair in $(echo "R1 R2"); do
        zcat $repo_location/output/bphage_viper_output/READ/${line}_${gutpart}_*.Hostout.${pair}.fastq.gz | \
            awk 'NR%4==1 {print $0}' | sed 's/^@//g' > temp.${line}_${gutpart}.Hostout.${pair}.readnames
        seqkit grep -v -f temp.${line}_${gutpart}.Hostout.${pair}.readnames \
            $repo_location/output/bphage_viper_output/READ/${line}_${gutpart}_*.trimmed.${pair}.fastq.gz | \
            pigz -p $threads > temp.${line}_${gutpart}.host.${pair}.fastq.gz
    done
done
# Merge reads per bee pool 
cat temp.${line}_*.host.R1.fastq.gz > merged_reads/${line}.host.R1.fastq.gz
cat temp.${line}_*.host.R2.fastq.gz > merged_reads/${line}.host.R2.fastq.gz

# Get reads mapping to all phages
samtools merge -@ $threads - $repo_location/output/mapped_phages/${line}*.bam | \
    samtools view -@ $threads -b -F4 | \
    samtools collate -@ $threads -O - | \
    samtools fastq -1 merged_reads/${line}.phages.R1.fastq.gz -2 merged_reads/${line}.phages.R2.fastq.gz \
    -0 temp.${line}.phages.unpaired.reads.fastq.gz -s temp.${line}.phages.singleton.reads.fastq.gz

# Merge Hostout reads per bee pool
cat $repo_location/output/bphage_viper_output/READ/${line}*Hostout.R1.fastq.gz > temp.${line}.Hostout.R1.fastq.gz
cat $repo_location/output/bphage_viper_output/READ/${line}*Hostout.R2.fastq.gz > temp.${line}.Hostout.R2.fastq.gz

# Map Hostout reads to all terL seqs and retreive fastq files
bwa-mem2 mem terL_ref/terLs_all_contigs.fasta \
    temp.${line}.Hostout.R1.fastq.gz temp.${line}.Hostout.R2.fastq.gz -t $threads | \
    samtools view -@ $threads -b -F4 | \
    samtools collate -@ $threads -O - | \
    samtools fastq -@ $threads -1 merged_reads/${line}.all_terLs.R1.fastq.gz -2 merged_reads/${line}.all_terLs.R2.fastq.gz \
    -0 /dev/null -s /dev/null

# Map Hostout reads to all core bacterial genera's 16S seqs and retreive fastq files
bwa-mem2 mem $VSC_SCRATCH/BPhage/ref/core_bacterial_genera_16S.fa \
    temp.${line}.Hostout.R1.fastq.gz temp.${line}.Hostout.R2.fastq.gz -t $threads | \
    samtools view -@ $threads -b -F4 | \
    samtools collate -@ $threads -O - | \
    samtools fastq -@ $threads -1 merged_reads/${line}.16S.R1.fastq.gz -2 merged_reads/${line}.16S.R2.fastq.gz \
    -0 /dev/null -s /dev/null

# Spoiler for another paper: Map Hostout reads to bacterial MAGs and retreive fastq files
bwa-mem2 mem MAG_ref/MAGs.sample.bins.fasta \
    temp.${line}.Hostout.R1.fastq.gz temp.${line}.Hostout.R2.fastq.gz -t $threads -t $threads | \
    samtools view -@ $threads -b -F2308 | \
    samtools collate -@ $threads -O - | \
    samtools fastq -1 merged_reads/${line}.MAG_mapped.R1.fastq.gz -2 merged_reads/${line}.MAG_mapped.R2.fastq.gz \
    -0 temp.${line}.MAG_mapped.unpaired.reads.fastq.gz -s temp.${line}.MAG_mapped.singleton.reads.fastq.gz

datasets=$(echo -e "\
host
phages
all_terLs
16S
MAG_mapped\
")

conda activate ska
for dataset in $(echo "$datasets"); do
    ska fastq -o ska/skf_files/${line}_${dataset} merged_reads/${line}.${dataset}.R1.fastq.gz merged_reads/${line}.${dataset}.R2.fastq.gz
done

# Clean up
rm temp.${line}*

echo "========================================================================"
duration=$SECONDS
printf 'Job finished in: %02d:%02d:%02d\n' $((duration/3600)) $((duration%3600/60)) $((duration%60))
